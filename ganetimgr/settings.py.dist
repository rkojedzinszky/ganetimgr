# -*- coding: utf-8 -*- vim:fileencoding=utf-8:
# Copyright (C) 2010-2014 GRNET S.A.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import os
import context
BASE_DIR = os.path.dirname(os.path.dirname(__file__))
PROJECT_DIR = os.path.join(BASE_DIR, 'ganetimgr')

DEBUG = True

# This setting is mandatory when DEBUG is set to False.
ALLOWED_HOSTS = [
    '.example.com',  # Allow domain and subdomains
    '.example.com.', # Also allow FQDN and subdomains
]

SESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickleSerializer'


SITE_ID = 1

# Time zone & localization
TIME_ZONE = 'Europe/Athens'

_ = lambda s: s

LANGUAGES = (
    ('de', 'Deutsch'),
    ('el', u'Ελληνικά'),
    ('en', _('English')),
)

LANGUAGE_CODE = 'en-us'

LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)

DATE_FORMAT = "d/m/Y H:i"
DATETIME_FORMAT = "d/m/Y H:i"


# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True
USE_L10N = True

MEDIA_ROOT = ''
MEDIA_URL = ''

TEMPLATES = [{
    'BACKEND': 'django.template.backends.django.DjangoTemplates',
    'APP_DIRS': True,
    'DIRS': [os.path.join(BASE_DIR, 'templates')],
    'OPTIONS': {
        'context_processors':(
        'django.contrib.auth.context_processors.auth',
                'django.template.context_processors.debug',
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'django.template.context_processors.tz',
                'django.template.context_processors.request',
                'context.pending_notifications.notify',
                'context.session_remaining.seconds',
                'context.global_vars.settings_vars',
                'django.contrib.messages.context_processors.messages'
            ),
    'debug': DEBUG

    },
}]


MIDDLEWARE = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'middleware.ForceLogout.ForceLogoutMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
    'middleware.UserMessages.UserMessageMiddleware',
)


SESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickleSerializer'
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'www'),
)

ROOT_URLCONF = 'ganetimgr.urls'


INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'widget_tweaks',
    'registration',
    'accounts',
    'ganeti',
    'apply',
    'notifications',
    'stats',
    'auditlog',
#    'oauth2_provider',
#    'corsheaders',
    'django_recaptcha'
)

# Caching is a vital part of ganetimgr.
# If you deploy more than one ganetimgr instances on the same server,
# and want to use Redis for both, make sure you select a different db for each instance
# Warning!!! Redis db should ALWAYS be an integer, denoting db index.
# If memcache is your preferred cache, then select:
#CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
#         'LOCATION': '127.0.0.1:11211',
#         'TIMEOUT': 1,
#     }
#}

LOGIN_URL = '/user/login'
LOGIN_REDIRECT_URL = '/'


EMAIL_HOST = "127.0.0.1"
EMAIL_PORT = 25
USE_X_FORWARDED_HOST = True

# Auth stuff
# If you plan to deploy LDAP modify according to your needs
AUTHENTICATION_BACKENDS = (
    #'django_auth_ldap.backend.LDAPBackend',
    'django.contrib.auth.backends.AllowAllUsersModelBackend',
)

#import ldap
#from django_auth_ldap.config import LDAPSearch

#AUTH_LDAP_BIND_DN = ""
#AUTH_LDAP_BIND_PASSWORD = ""
#AUTH_LDAP_SERVER_URI = "ldap://ldap.example.com"
#AUTH_LDAP_START_TLS = True
#AUTH_LDAP_USER_SEARCH = LDAPSearch("ou=People,dc=dept,dc=example,dc=com",
#            ldap.SCOPE_SUBTREE, "(uid=%(user)s)")
#AUTH_LDAP_USER_ATTR_MAP = {
#        "first_name": "givenName",
#        "last_name": "sn",
#        "email": "mail"
#        }

ACCOUNT_ACTIVATION_DAYS = 10

AUTH_PROFILE_MODULE = 'accounts.UserProfile'

SESSION_EXPIRE_AT_BROWSER_CLOSE = True
#SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_COOKIE_AGE = 10800
SESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickleSerializer'

IDLE_ACCOUNT_NOTIFICATION_DAYS = '180'

# Number of days that hash verification is active
INSTANCE_ACTION_ACTIVE_DAYS = 7

# This works for our GRNET NOC Jira installation. Default is False
HELPDESK_INTEGRATION_JAVASCRIPT_URL = ""
HELPDESK_INTEGRATION_JAVASCRIPT_PARAMS = {
    'customfield_11551': 'tier-1'
}

COLLECTD_URL = "http://stats.example.com"
# Graphs nodata image

SERVER_MONITORING_URL = 'https://monitoring.example.com'

import _version
SW_VERSION = _version.VERSION

NODATA_IMAGE = 'static/nodata.gif'


WHITELIST_IP_MAX_SUBNET_V4 = 26
WHITELIST_IP_MAX_SUBNET_V6 = 64

# Choose whether to support websockets console or not.
WEBSOCK_VNC_ENABLED = True
# This is meant to be used with twistednovncauthproxy
# twistd --pidfile=/tmp/proxy.pid -n vncap -c tcp:8888:interface=0.0.0.0
NOVNC_PROXY = "vnc.proxy.com:8888"
NOVNC_USE_TLS = True

# Define these to use github.com/rkojedzinszky/go-novncauthproxy as a vnc proxy
# NOVNC_JWE_SECRET: base64 encoded form of a 32 byte key
NOVNC_JWE_SECRET = None
# Expiry time of the generated token
NOVNC_JWE_TOKEN_EXPIRY = 5
# Base URI for the token
NOVNC_PROXY_BASE = "novnc/"
# Set this if servers use password authentication
NOVNC_JWE_SERVER_PASSWORD = ''

# Legacy VNC refers to the Java applet console.
# We consider this deprecated so from now on will default to off.
LEGACY_VNC_ENABLED = False

BRANDING = {
    "SERVICE_PROVIDED_BY": {
        "NAME": "EXAMPLE",
        "URL": "//example.dot.com",
        "SOCIAL_NETWORKS": [
            {
                "URL": "https://facebook.com/",
                "FONT_AWESOME_NAME": "fa-facebook",
                "FONT_COLOR": "#3b5998"
            },
            {
                "URL": "https://twitter.com/",
                "FONT_AWESOME_NAME": "fa-twitter",
                "FONT_COLOR": "#00acee"
            }
        ]
    },
    "VIDEO": "", # iframe url
    "LOGO": "/static/ganetimgr/img/logo.png",
    "FAVICON": "/static/ganetimgr/img/favicon.ico",
    "MOTTO": "virtual private servers",
    "FOOTER_ICONS_IFRAME": False,
    "SHOW_WELCOME_TEXT": True,
    # show the administrative contact
    # option when creating a new vm
    "SHOW_ADMINISTRATIVE_FORM": True,
    "SHOW_ORGANIZATION_FORM": True,
    "TITLE": "ganetimgr",
    # RSS Feed for the login page
    "FEED_URL": "",
    # Analytics script path. See 'templates/includes/analytics.html.dist'
    "ANALYTICS_FILE_PATH": ""
}

# Set the email subject prefix:
EMAIL_SUBJECT_PREFIX = "[ganetimgr SERVICE] "
SERVER_EMAIL = "no-reply@example.com"
DEFAULT_FROM_EMAIL = "no-reply@example.com"

# Flatpages manipulation. Show or hide flatpages links in page.
FLATPAGES = {
    "INFO": True,
    "TOS": True,
    "FAQ": True,
}
# Get a recaptcha key
RECAPTCHA_PUBLIC_KEY = ''
RECAPTCHA_PRIVATE_KEY = ''
RECAPTCHA_USE_SSL = True

REGISTRATION_FORM = 'accounts.forms.RegistrationForm'

#########################
#                       #
#       Ganeti          #
#                       #
#########################
# Select your ganetimgr prefix. This is applied in the tags
# of the instances. You could leave it as it is or set your own,
# eg.  GANETI_TAG_PREFIX = "vmservice"
GANETI_TAG_PREFIX = "ganetimgr"
RAPI_CONNECT_TIMEOUT = 8
RAPI_RESPONSE_TIMEOUT = 15

# URL with the available operating system images
IMAGES_URL = ["http://repo.noc.grnet.gr/images/"]

TEST_RUNNER = 'django.test.simple.DjangoTestSuiteRunner'
#########################
#                       #
#      Auditlog         #
#                       #
#########################

# this option sets the amount of days old an audit entry has to be
# in order to be shown in audit log page
# '0' means show all entries

AUDIT_ENTRIES_LAST_X_DAYS = 10


# Instance specific django config.
ADMINS = (
    ('John Doe', 'john@example.com'),
)
MANAGERS = ADMINS

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.',  # 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': '',                # Or path to database file if using sqlite3.
        'USER': '',             # Not used with sqlite3.
        'PASSWORD': '',          # Not used with sqlite3.
        'HOST': '',             # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '',             # Set to empty string for default. Not used with sqlite3.
        #'OPTIONS': { 'init_command': 'SET default_storage_engine=INNODB', }
    }
}

# Make this unique, and don't share it with anybody.
SECRET_KEY = '<CHANGE ME>'


# OAUTH2
if 'oauth2_provider' in INSTALLED_APPS and 'corsheaders' in INSTALLED_APPS:
    OAUTH2_PROVIDER = {
        'ACCESS_TOKEN_EXPIRE_SECONDS': 60 * 60 * 24 * 7 * 10,
        'SCOPES': {
            'read': 'Read scope',
        },
        'CLIENT_ID_GENERATOR_CLASS': 'oauth2_provider.generators.ClientIdGenerator',
    }
    CORS_ORIGIN_ALLOW_ALL = True
    MIDDLEWARE += ('corsheaders.middleware.CorsMiddleware',)

#########################
#                       #
#       Logging         #
#                       #
#########################

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        },
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
    }
}

#########################
#                       #
#       Sentry          #
#                       #
#########################
SENTRY = {
    'activate': False,
    'sentry_dsn': ''
}
if SENTRY['activate']:
    import raven
    sentry_dsn = os.getenv("SENTRY_DSN") or SENTRY['sentry_dsn']
    if not sentry_dsn:
        raise RuntimeError("Sentry dsn not configured neither as environmental"
                           " variable nor in the settings.py file")

    RAVEN_CONFIG = {
        'dsn': sentry_dsn,
        'release': raven.fetch_git_sha(BASE_DIR)
    }
    INSTALLED_APPS += ('raven.contrib.django.raven_compat',)
    LOGGING['handlers']['sentry'] = {
        'class': 'raven.contrib.django.handlers.SentryHandler'
    }
    LOGGING['loggers']['django.request']['handlers'] = ['sentry']

#########################
#                       #
#      Recaptcha        #
#                       #
#########################
RECAPTCHA_SITE_KEY = ''
RECAPTCHA_SECRET_KEY = ''

#########################
#                       #
#      Beanstalkd       #
#                       #
#########################
BEANSTALKD_HOST = 'localhost'
BEANSTALKD_PORT = 11300

# Django 3.2+
DEFAULT_AUTO_FIELD = "django.db.models.AutoField"
